Configurações de aplicações distribuidas com etcd
Tags: go, concorrencia, cloud config

Wilson Júnior
Software enthusiast, Globo.com
wilsonpjunior@gmail.com
https://about.me/wpjunior
@wpjunior

* Wilson Júnior
: Sempre demonstrar grato pelo convite
: Agradecer a presença de todos

    import "developers.com/brasil/goias/interior"

    // @desenvolvedor na Globo.com há 4 anos

    gopher := "❤"
    pythonista := true
    jaTrabalhou := []string{
       "ecmascript",
       "ruby",
       "erlang",
       "c",
    }

    // Speed Biker
    bike.Run() || bike.Climb() || bike.Sprint()

    for {
       tech.Love() // Apaixonado por tecnologia
    }

* Obrigado pela oportunidade


* Caracteristicas de uma configuração

* Caracteristicas de uma configuração

- Descreve o comportamento
- Infrequentemente alterada

* Imaginemos que possuimos uma aplicação escalada horizontamente 100 vezes em diferentes lugares
* E cada dessas instancias recebem uma carga de transações muito alta

* Como lidariamos com a consulta e escrita de configurações ?

* Variáveis de ambiente
.image env-variables.png

* Good to handle
- Variáveis de ambiente são rápidas e fáceis de ser compreendidas
: Variáveis de ambientes são rápidas e não requerem nenhum I/O externo em tempo de consulta

  process.env['MY_VAR'] # Nodejs

  os.environ['MY_VAR'] # Python

  os.Getenv("MY_VAR") # Javascript

  ENV["MY_VAR"] # ruby

* Bad to handle
- E como eu atualizo essas variáveis de ambientes que estão distribuidas ?
- Gracefull restart
- Tempo $$$$
: Cordenar 100 restarts para quando houver mudanças
: a aplicação deve fazer *gracefull* *restart* não sacrificando nenhuma transação em andamento

* Consultar no banco de dados
.image database-query.png

* Good to handle
- Freshness
- Pode ser o mesmo banco de dados da aplicação
: - os dados sempre estarão frescos pois foram consultados no momento
: - não preocupar com um componente para manter

* Bad to handle
- criamos um gargalo.
- too many: "304 not modified content".

* Consultar no banco de dados + sistema de cache
.image database-cache.png

* Good to handle
- o cache garantirá velocidade no acesso.

* Bad to handle
- Inconsistencia temporal (cache war!)
- se a aplicação é crítica... estar inconsistente é grave

* Escolha um banco de dados especializados em configurações
.image database-config.png

* Não é uma ideia tão nova

- Google Chubby (privado)
- Apache Zookeeper
- GConf - old GNOME Desktop
- DConf - new GNOME Desktop

* O que é o etcd

- /etc *distributed*
- Utilizado como storage do kubernetes

* O que é o etcd

- Criado pela CoreOS
- Key/value store
- Persistente
- Cluster Tolerante a falhas

* O que é o etcd
- Consistencia e via algoritmo Raft
- MVCC Multiversion concurrency control
- 18K+ stars on github
- utilizado em outras empresas

* Protocolo debaixo dos panos

- GRPC + HTTP (v3 da API)
- Restful + JSON + HTTP (v2 da API)

* Raft

* Raft

.image raft.png

* Raft

- Um algoritmo de *Consensus*
- Conceito de *Log* *replicado*
- Similar ao Paxos (1989);
- https://raft.github.io/
- Necessidade de manter os dados consistentes e tolerante a falhas

* Tamanho do cluster
.html cluster-size.html

* Replicated log

* Exemplo

.image replicated-log.png

* Transações lineares

* Tradeoff: propagar x consultar

: Somos treinados/viciados em pensar no fluxo só de consultar dados.

* Quando propagar é melhor

* Quando propagar é melhor

- os dados não são frequentemente alterados
- os dados não possuem um grande volume

* Exemplos

- Configurações de rede
- Feature flags
- Flags de negócio

* Quando consultar é melhor

* Quando consultar é melhor

- os dados são frequentemente alterados
- os dados possuem um grande volume

* Exemplos

- Conteúdo estruturado
- Dados de usuários

* Lets code and experiment =)

* github.com/coreos/etcd/clientv3

* Conectando no cluster
.code simple-get.go /clientv3.New/,/defer/ HLxxx

* Preciso ler uma chave terminal

    #!/bin/bash
    export ETCDCTL_API=3
    etcdctl get "my-key"

* Preciso ler uma chave

.code simple-get.go /cli.Get/,/^}/ HLxxx

* Como eu escrevo uma chave terminal

    #!/bin/bash
    export ETCDCTL_API=3
    etcdctl put "my-key" "my-value"

* Como eu escrevo uma chave

.code simple-put.go /cli.Put/,/^}/ HLxxx

* Como eu leio várias chaves terminal

    #!/bin/bash
    export ETCDCTL_API=3
    etcdctl get "my" --prefix

* Como eu leio várias chaves

.code simple-get-prefix.go /cli.Get/,/^}/ HLGet

* Quero escutar a mudança de uma chave terminal

    #!/bin/bash
    export ETCDCTL_API=3
    etcdctl watch "my"

* Quero escutar a mudança de uma chave

.code simple-watch.go /cli.Watch/,/^}/ HLxxx

* Quero escutar a mudança de várias chaves terminal

    #!/bin/bash
    export ETCDCTL_API=3
    etcdctl watch "my" --prefix

* Quero escutar a mudança de várias chaves

.code simple-watch-prefix.go /cli.Watch/,/^}/ HLxxx

* Quero ler uma chave e não perder nenhuma mudança

.code simple-get-watch.go /cli.Get/,/Initial value/ HLxxx

* Quero ler uma chave e não perder nenhuma mudança
.code simple-get-watch.go /cli.Watch/,/^}/ HLxxx

* Imaginemos uma App de e-commerce, que possui 300 instancias distribuidas no brasil

* Latency Comparison Numbers (~2012)

.html latency.html

* Exemplo de App

.code simple-app.go /var/,/^}/ HLxxx

* Exemplo de App
.code simple-app.go /func loadConfig/,/defer/ HLxxx

* Exemplo de App
.code simple-app.go /key/,/Store/ HLxxx

* Exemplo de App
.code simple-app.go /cli.Watch/,/^}/ HLxxx

* Let's run and test and benchmark

* Concurrency tools

- github.com/coreos/etcd/clientv3/concurrency

* Lock distribuído

* Lock distribuído

.code simple-mutex.go /concurrency.NewSession/,/}/ HLxxx

* Lock distribuído

.code simple-mutex.go /concurrency.NewMutex/,/slide/ HLxxx

* Let's run and test

* Eleição de Líderes

* Eleição do gorila da bola azul

.code simple-election.go /concurrency.NewElection/,/Eu sou o gorila/ HLxxx

* Eleição do gorila da bola azul

.code simple-election.go /election.Observe/,/slide/ HLxxx

* Eleição do gorila da bola azul

.code simple-election.go /election.Campaign/,/slide/ HLxxx

* Let's run and test

* Código fonte disponível

- github.com/wpjunior/etcd-slides

* Outros projetos semelhantes

- Consul
- Serf
- Zookeeper

* Estamos contratando

- talentos.globo.com
